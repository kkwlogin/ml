import pandas as pd
from sklearn.model_selection import train_test_split
df = pd.read_csv('/content/lithium-ion batteries.csv')

df.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Crystal System'] = le.fit_transform(df['Crystal System'])
df['Has Bandstructure'] = le.fit_transform(df['Has Bandstructure'])

X = df.iloc[:, 3:-1]
Y = df.iloc[:, -1]

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 42)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

import tensorflow as tf

ann = tf.keras.models.Sequential()

tf._version_

ann = tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units = 64, activation = 'relu',input_shape = (X.shape[1],)))
ann.add(tf.keras.layers.Dense(units = 32, activation = 'relu'))
ann.add(tf.keras.layers.Dense(units = 32, activation = 'relu'))
ann.add(tf.keras.layers.Dense(units = 3, activation = 'softmax'))
ann.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])
ann.fit(X_train, Y_train, batch_size = 32, epochs = 100)



import numpy as np
pred= ann.predict(X_test)
Y_pred_classes = np.argmax(pred, axis=1)

print(Y_pred_classes)
